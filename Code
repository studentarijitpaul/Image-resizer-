"""
# 🖼️ Image Resizer (Python)

An advanced **Image Resizer tool** built using Python and Pillow (PIL).  
It allows you to resize single or multiple images **while maintaining aspect ratio**,  
with proper **error handling**, **batch processing**, and **custom output paths**.

---

## 🚀 Features
✅ Resize single images or entire folders (batch mode)  
✅ Maintain aspect ratio automatically  
✅ Supports JPG, PNG, WEBP, BMP formats  
✅ Create output folders automatically  
✅ Clean error handling  
✅ No external dependencies except Pillow  

---

## 🧰 Requirements
Install the Pillow library:
    pip install pillow

---

## ⚙️ How to Run

### Single image
    python image_resizer.py
Then enter:
    Choose mode (single/batch): single
    Enter image path: test.jpg
    Enter output path: resized/test_resized.jpg
    Enter new width (or leave blank): 500
    Enter new height (or leave blank):

### Batch resize
    python image_resizer.py
Then enter:
    Choose mode (single/batch): batch
    Enter input folder: images/
    Enter output folder: resized_images/
    Enter new width (or leave blank):
    Enter new height (or leave blank): 600

---

## 📁 Folder Structure
ImageResizer/
│
├── image_resizer.py   # This file (contains code + README)
└── resized_images/    # Output folder (auto-created)

---

## 👨‍💻 Author
**Arijit Pal**  
Python Developer | AI Enthusiast  
📧 ap.dev.official@gmail.com  
💬 "Tera bhai hai na tere saath 💪"
"""

from PIL import Image
import os

def resize_image(input_path: str, output_path: str, width: int = None, height: int = None):
    """
    Resize a single image to the given width/height while maintaining aspect ratio.
    """
    try:
        if not os.path.exists(input_path):
            raise FileNotFoundError(f"❌ Input file not found: {input_path}")

        img = Image.open(input_path)
        original_width, original_height = img.size

        if width is None and height is None:
            raise ValueError("⚠️ You must provide width or height to resize.")

        # Maintain aspect ratio
        if width and not height:
            ratio = width / float(original_width)
            height = int((float(original_height) * ratio))
        elif height and not width:
            ratio = height / float(original_height)
            width = int((float(original_width) * ratio))

        resized_img = img.resize((width, height), Image.Resampling.LANCZOS)

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        resized_img.save(output_path)

        print(f"✅ Image resized successfully: {output_path}")

    except Exception as e:
        print(f"⚠️ Error resizing image '{input_path}': {str(e)}")


def batch_resize(input_folder: str, output_folder: str, width: int = None, height: int = None):
    """
    Resize all images in a folder and save them to the output folder.
    """
    try:
        if not os.path.exists(input_folder):
            raise FileNotFoundError(f"❌ Folder not found: {input_folder}")

        os.makedirs(output_folder, exist_ok=True)
        supported_exts = ('.jpg', '.jpeg', '.png', '.webp', '.bmp')

        for filename in os.listdir(input_folder):
            if filename.lower().endswith(supported_exts):
                input_path = os.path.join(input_folder, filename)
                output_path = os.path.join(output_folder, filename)
                resize_image(input_path, output_path, width, height)

        print("🎉 Batch resizing completed successfully!")

    except Exception as e:
        print(f"⚠️ Batch resize error: {str(e)}")


if __name__ == "__main__":
    print("📸 Image Resizer")
    mode = input("Choose mode (single/batch): ").strip().lower()

    if mode == "single":
        input_path = input("Enter image path: ").strip()
        output_path = input("Enter output path: ").strip()
        width = input("Enter new width (or leave blank): ").strip()
        height = input("Enter new height (or leave blank): ").strip()

        width = int(width) if width else None
        height = int(height) if height else None

        resize_image(input_path, output_path, width, height)

    elif mode == "batch":
        input_folder = input("Enter input folder: ").strip()
        output_folder = input("Enter output folder: ").strip()
        width = input("Enter new width (or leave blank): ").strip()
        height = input("Enter new height (or leave blank): ").strip()

        width = int(width) if width else None
        height = int(height) if height else None

        batch_resize(input_folder, output_folder, width, height)

    else:
        print("❌ Invalid mode. Please choose 'single' or 'batch'.")
