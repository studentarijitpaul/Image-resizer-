"""
image_resizer.py
Resize single or multiple images with proper error handling.
"""

from PIL import Image
import os

def resize_image(input_path: str, output_path: str, width: int = None, height: int = None):
    """
    Resize an image to the given width or height (maintains aspect ratio if only one is provided).
    """
    try:
        if not os.path.exists(input_path):
            raise FileNotFoundError(f"‚ùå Input file not found: {input_path}")

        img = Image.open(input_path)
        original_width, original_height = img.size

        if width is None and height is None:
            raise ValueError("You must provide width or height to resize.")

        # Maintain aspect ratio
        if width and not height:
            ratio = width / float(original_width)
            height = int((float(original_height) * float(ratio)))
        elif height and not width:
            ratio = height / float(original_height)
            width = int((float(original_width) * float(ratio)))

        resized_img = img.resize((width, height), Image.Resampling.LANCZOS)

        # Ensure output directory exists
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        resized_img.save(output_path)

        print(f"‚úÖ Image resized successfully: {output_path}")

    except Exception as e:
        print(f"‚ö†Ô∏è Error resizing image '{input_path}': {str(e)}")


def batch_resize(input_folder: str, output_folder: str, width: int = None, height: int = None):
    """
    Resize all images in a folder and save them to the output folder.
    """
    try:
        if not os.path.exists(input_folder):
            raise FileNotFoundError(f"‚ùå Folder not found: {input_folder}")

        os.makedirs(output_folder, exist_ok=True)
        supported_exts = ('.jpg', '.jpeg', '.png', '.webp', '.bmp')

        for filename in os.listdir(input_folder):
            if filename.lower().endswith(supported_exts):
                input_path = os.path.join(input_folder, filename)
                output_path = os.path.join(output_folder, filename)
                resize_image(input_path, output_path, width, height)

        print("üéâ Batch resizing completed successfully!")

    except Exception as e:
        print(f"‚ö†Ô∏è Batch resize error: {str(e)}")


if __name__ == "__main__":
    print("üì∏ Image Resizer")
    mode = input("Choose mode (single/batch): ").strip().lower()

    if mode == "single":
        input_path = input("Enter image path: ").strip()
        output_path = input("Enter output path: ").strip()
        width = input("Enter new width (or leave blank): ").strip()
        height = input("Enter new height (or leave blank): ").strip()

        width = int(width) if width else None
        height = int(height) if height else None

        resize_image(input_path, output_path, width, height)

    elif mode == "batch":
        input_folder = input("Enter input folder: ").strip()
        output_folder = input("Enter output folder: ").strip()
        width = input("Enter new width (or leave blank): ").strip()
        height = input("Enter new height (or leave blank): ").strip()

        width = int(width) if width else None
        height = int(height) if height else None

        batch_resize(input_folder, output_folder, width, height)

    else:
        print("‚ùå Invalid mode. Please choose 'single' or 'batch'.")
